// 第一个if很重要，证明不是，是很简单的事情

// 方法1：遍历一对一的匹配关系，一个个找过去 n*n 的复杂度。
bool CheckPremutation(string s1, string s2){
    if(s1.size() == s2.size())
        return false;

    vector<bool> registerList(s1.size(), false);
    for(auto ch:s1){
        bool found = false;
        for(int i = 0 ; i < registerList.size() ; i++){
            if(!registerList[i] && s2[i] == ch){
                found = true;
                registerList[i] = true;
                break;
            }
        }

        if(!found)
            return false;
    }

    return true;
}

// 方法2： rank，permutation的一个很大的特性，就是rank之后一样
bool CheckPermutation(string s1, string s2){
     if(s1.size() == s2.size())
        return false;
     // rank s1 
     // rank s2
     // compair
}

// 方法3： 素数累加和？